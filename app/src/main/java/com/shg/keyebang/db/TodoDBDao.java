package com.shg.keyebang.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shg.keyebang.services.sqlitemodel.CourseTableDB;

import com.shg.keyebang.services.sqlitemodel.TodoDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TODO_DB".
*/
public class TodoDBDao extends AbstractDao<TodoDB, Long> {

    public static final String TABLENAME = "TODO_DB";

    /**
     * Properties of entity TodoDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TodoId = new Property(0, Long.class, "todoId", true, "_id");
        public final static Property TodoTitle = new Property(1, String.class, "todoTitle", false, "TODO_TITLE");
        public final static Property DeadlineYear = new Property(2, int.class, "deadlineYear", false, "DEADLINE_YEAR");
        public final static Property DeadlineMonth = new Property(3, int.class, "deadlineMonth", false, "DEADLINE_MONTH");
        public final static Property DeadlineDay = new Property(4, int.class, "deadlineDay", false, "DEADLINE_DAY");
        public final static Property TodoMessage = new Property(5, String.class, "todoMessage", false, "TODO_MESSAGE");
        public final static Property Color = new Property(6, int.class, "color", false, "COLOR");
        public final static Property CourseId = new Property(7, Long.class, "courseId", false, "COURSE_ID");
    }

    private DaoSession daoSession;


    public TodoDBDao(DaoConfig config) {
        super(config);
    }
    
    public TodoDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TODO_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: todoId
                "\"TODO_TITLE\" TEXT," + // 1: todoTitle
                "\"DEADLINE_YEAR\" INTEGER NOT NULL ," + // 2: deadlineYear
                "\"DEADLINE_MONTH\" INTEGER NOT NULL ," + // 3: deadlineMonth
                "\"DEADLINE_DAY\" INTEGER NOT NULL ," + // 4: deadlineDay
                "\"TODO_MESSAGE\" TEXT," + // 5: todoMessage
                "\"COLOR\" INTEGER NOT NULL ," + // 6: color
                "\"COURSE_ID\" INTEGER);"); // 7: courseId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TODO_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TodoDB entity) {
        stmt.clearBindings();
 
        Long todoId = entity.getTodoId();
        if (todoId != null) {
            stmt.bindLong(1, todoId);
        }
 
        String todoTitle = entity.getTodoTitle();
        if (todoTitle != null) {
            stmt.bindString(2, todoTitle);
        }
        stmt.bindLong(3, entity.getDeadlineYear());
        stmt.bindLong(4, entity.getDeadlineMonth());
        stmt.bindLong(5, entity.getDeadlineDay());
 
        String todoMessage = entity.getTodoMessage();
        if (todoMessage != null) {
            stmt.bindString(6, todoMessage);
        }
        stmt.bindLong(7, entity.getColor());
 
        Long courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindLong(8, courseId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TodoDB entity) {
        stmt.clearBindings();
 
        Long todoId = entity.getTodoId();
        if (todoId != null) {
            stmt.bindLong(1, todoId);
        }
 
        String todoTitle = entity.getTodoTitle();
        if (todoTitle != null) {
            stmt.bindString(2, todoTitle);
        }
        stmt.bindLong(3, entity.getDeadlineYear());
        stmt.bindLong(4, entity.getDeadlineMonth());
        stmt.bindLong(5, entity.getDeadlineDay());
 
        String todoMessage = entity.getTodoMessage();
        if (todoMessage != null) {
            stmt.bindString(6, todoMessage);
        }
        stmt.bindLong(7, entity.getColor());
 
        Long courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindLong(8, courseId);
        }
    }

    @Override
    protected final void attachEntity(TodoDB entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TodoDB readEntity(Cursor cursor, int offset) {
        TodoDB entity = new TodoDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // todoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // todoTitle
            cursor.getInt(offset + 2), // deadlineYear
            cursor.getInt(offset + 3), // deadlineMonth
            cursor.getInt(offset + 4), // deadlineDay
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // todoMessage
            cursor.getInt(offset + 6), // color
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // courseId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TodoDB entity, int offset) {
        entity.setTodoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTodoTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeadlineYear(cursor.getInt(offset + 2));
        entity.setDeadlineMonth(cursor.getInt(offset + 3));
        entity.setDeadlineDay(cursor.getInt(offset + 4));
        entity.setTodoMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setColor(cursor.getInt(offset + 6));
        entity.setCourseId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TodoDB entity, long rowId) {
        entity.setTodoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TodoDB entity) {
        if(entity != null) {
            return entity.getTodoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TodoDB entity) {
        return entity.getTodoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCourseTableDBDao().getAllColumns());
            builder.append(" FROM TODO_DB T");
            builder.append(" LEFT JOIN COURSE_TABLE_DB T0 ON T.\"COURSE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TodoDB loadCurrentDeep(Cursor cursor, boolean lock) {
        TodoDB entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CourseTableDB courseTableDB = loadCurrentOther(daoSession.getCourseTableDBDao(), cursor, offset);
        entity.setCourseTableDB(courseTableDB);

        return entity;    
    }

    public TodoDB loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TodoDB> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TodoDB> list = new ArrayList<TodoDB>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TodoDB> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TodoDB> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
