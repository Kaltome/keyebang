package com.shg.keyebang.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shg.keyebang.services.sqlitemodel.TimeDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIME_DB".
*/
public class TimeDBDao extends AbstractDao<TimeDB, Long> {

    public static final String TABLENAME = "TIME_DB";

    /**
     * Properties of entity TimeDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property Weekday = new Property(1, int.class, "weekday", false, "WEEKDAY");
        public final static Property Firstclass = new Property(2, int.class, "firstclass", false, "FIRSTCLASS");
        public final static Property Lastclass = new Property(3, int.class, "lastclass", false, "LASTCLASS");
        public final static Property Week = new Property(4, int.class, "week", false, "WEEK");
        public final static Property CourseId = new Property(5, Long.class, "courseId", false, "COURSE_ID");
    }

    private DaoSession daoSession;


    public TimeDBDao(DaoConfig config) {
        super(config);
    }
    
    public TimeDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIME_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"WEEKDAY\" INTEGER NOT NULL ," + // 1: weekday
                "\"FIRSTCLASS\" INTEGER NOT NULL ," + // 2: firstclass
                "\"LASTCLASS\" INTEGER NOT NULL ," + // 3: lastclass
                "\"WEEK\" INTEGER NOT NULL ," + // 4: week
                "\"COURSE_ID\" INTEGER);"); // 5: courseId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIME_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TimeDB entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getWeekday());
        stmt.bindLong(3, entity.getFirstclass());
        stmt.bindLong(4, entity.getLastclass());
        stmt.bindLong(5, entity.getWeek());
 
        Long courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindLong(6, courseId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TimeDB entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getWeekday());
        stmt.bindLong(3, entity.getFirstclass());
        stmt.bindLong(4, entity.getLastclass());
        stmt.bindLong(5, entity.getWeek());
 
        Long courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindLong(6, courseId);
        }
    }

    @Override
    protected final void attachEntity(TimeDB entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TimeDB readEntity(Cursor cursor, int offset) {
        TimeDB entity = new TimeDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getInt(offset + 1), // weekday
            cursor.getInt(offset + 2), // firstclass
            cursor.getInt(offset + 3), // lastclass
            cursor.getInt(offset + 4), // week
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // courseId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TimeDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWeekday(cursor.getInt(offset + 1));
        entity.setFirstclass(cursor.getInt(offset + 2));
        entity.setLastclass(cursor.getInt(offset + 3));
        entity.setWeek(cursor.getInt(offset + 4));
        entity.setCourseId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TimeDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TimeDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TimeDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
